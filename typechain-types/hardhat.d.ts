/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IVotes",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotes__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Metadata__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Airdrop",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Airdrop__factory>;
    getContractFactory(
      name: "PairAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PairAPI__factory>;
    getContractFactory(
      name: "RewardAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardAPI__factory>;
    getContractFactory(
      name: "IPairAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPairAPI__factory>;
    getContractFactory(
      name: "VeNFTAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeNFTAPI__factory>;
    getContractFactory(
      name: "EpochController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EpochController__factory>;
    getContractFactory(
      name: "FeeDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeeDistributor__factory>;
    getContractFactory(
      name: "Bribe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Bribe__factory>;
    getContractFactory(
      name: "BribeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BribeFactory__factory>;
    getContractFactory(
      name: "GaugeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GaugeFactory__factory>;
    getContractFactory(
      name: "PairFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PairFactory__factory>;
    getContractFactory(
      name: "Gauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Gauge__factory>;
    getContractFactory(
      name: "IBribe",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBribe__factory>;
    getContractFactory(
      name: "IBribeAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBribeAPI__factory>;
    getContractFactory(
      name: "IBribeDistribution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBribeDistribution__factory>;
    getContractFactory(
      name: "IBribeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBribeFactory__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IGauge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGauge__factory>;
    getContractFactory(
      name: "IGaugeAPI",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGaugeAPI__factory>;
    getContractFactory(
      name: "IGaugeDistribution",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGaugeDistribution__factory>;
    getContractFactory(
      name: "IGaugeFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGaugeFactory__factory>;
    getContractFactory(
      name: "IMinter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMinter__factory>;
    getContractFactory(
      name: "IPair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPair__factory>;
    getContractFactory(
      name: "IPairCallee",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPairCallee__factory>;
    getContractFactory(
      name: "IPairFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPairFactory__factory>;
    getContractFactory(
      name: "IRewarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewarder__factory>;
    getContractFactory(
      name: "IRewardsDistributor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRewardsDistributor__factory>;
    getContractFactory(
      name: "IRouter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRouter__factory>;
    getContractFactory(
      name: "ITokan",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITokan__factory>;
    getContractFactory(
      name: "IVeArtProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVeArtProxy__factory>;
    getContractFactory(
      name: "IVoter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVoter__factory>;
    getContractFactory(
      name: "IVotingEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IVotingEscrow__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "Minter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Minter__factory>;
    getContractFactory(
      name: "MockERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20__factory>;
    getContractFactory(
      name: "MockUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUSDC__factory>;
    getContractFactory(
      name: "Pair",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pair__factory>;
    getContractFactory(
      name: "PairFees",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PairFees__factory>;
    getContractFactory(
      name: "RewardDistributorV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RewardDistributorV2__factory>;
    getContractFactory(
      name: "Router",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Router__factory>;
    getContractFactory(
      name: "Tokan",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Tokan__factory>;
    getContractFactory(
      name: "VeArtProxyUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VeArtProxyUpgradeable__factory>;
    getContractFactory(
      name: "Voter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Voter__factory>;
    getContractFactory(
      name: "VotingEscrow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.VotingEscrow__factory>;
    getContractFactory(
      name: "IWETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IWETH__factory>;
    getContractFactory(
      name: "WETH",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IVotes",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotes>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Metadata>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Airdrop",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Airdrop>;
    getContractAt(
      name: "PairAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PairAPI>;
    getContractAt(
      name: "RewardAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardAPI>;
    getContractAt(
      name: "IPairAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPairAPI>;
    getContractAt(
      name: "VeNFTAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeNFTAPI>;
    getContractAt(
      name: "EpochController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EpochController>;
    getContractAt(
      name: "FeeDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeeDistributor>;
    getContractAt(
      name: "Bribe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Bribe>;
    getContractAt(
      name: "BribeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BribeFactory>;
    getContractAt(
      name: "GaugeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GaugeFactory>;
    getContractAt(
      name: "PairFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PairFactory>;
    getContractAt(
      name: "Gauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Gauge>;
    getContractAt(
      name: "IBribe",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBribe>;
    getContractAt(
      name: "IBribeAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBribeAPI>;
    getContractAt(
      name: "IBribeDistribution",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBribeDistribution>;
    getContractAt(
      name: "IBribeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBribeFactory>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IGauge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGauge>;
    getContractAt(
      name: "IGaugeAPI",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGaugeAPI>;
    getContractAt(
      name: "IGaugeDistribution",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGaugeDistribution>;
    getContractAt(
      name: "IGaugeFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGaugeFactory>;
    getContractAt(
      name: "IMinter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMinter>;
    getContractAt(
      name: "IPair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPair>;
    getContractAt(
      name: "IPairCallee",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPairCallee>;
    getContractAt(
      name: "IPairFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPairFactory>;
    getContractAt(
      name: "IRewarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewarder>;
    getContractAt(
      name: "IRewardsDistributor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRewardsDistributor>;
    getContractAt(
      name: "IRouter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRouter>;
    getContractAt(
      name: "ITokan",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITokan>;
    getContractAt(
      name: "IVeArtProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVeArtProxy>;
    getContractAt(
      name: "IVoter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVoter>;
    getContractAt(
      name: "IVotingEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IVotingEscrow>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "Minter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Minter>;
    getContractAt(
      name: "MockERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20>;
    getContractAt(
      name: "MockUSDC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUSDC>;
    getContractAt(
      name: "Pair",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pair>;
    getContractAt(
      name: "PairFees",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PairFees>;
    getContractAt(
      name: "RewardDistributorV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RewardDistributorV2>;
    getContractAt(
      name: "Router",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Router>;
    getContractAt(
      name: "Tokan",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Tokan>;
    getContractAt(
      name: "VeArtProxyUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VeArtProxyUpgradeable>;
    getContractAt(
      name: "Voter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Voter>;
    getContractAt(
      name: "VotingEscrow",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.VotingEscrow>;
    getContractAt(
      name: "IWETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IWETH>;
    getContractAt(
      name: "WETH",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.WETH>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
