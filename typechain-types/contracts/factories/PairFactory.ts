/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface PairFactoryInterface extends utils.Interface {
  functions: {
    "FEE_PRECISION()": FunctionFragment;
    "MAX_FEE()": FunctionFragment;
    "acceptEmergencyCouncil()": FunctionFragment;
    "acceptFeeManager()": FunctionFragment;
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "createPair(address,address,bool)": FunctionFragment;
    "emergencyCouncil()": FunctionFragment;
    "feeManager()": FunctionFragment;
    "getFee(bool)": FunctionFragment;
    "getFeeAmount(bool,uint256,address)": FunctionFragment;
    "getInitializable()": FunctionFragment;
    "getPair(address,address,bool)": FunctionFragment;
    "init(address,address,address)": FunctionFragment;
    "isPair(address)": FunctionFragment;
    "isPrivileged(address)": FunctionFragment;
    "pairCodeHash()": FunctionFragment;
    "pairManager()": FunctionFragment;
    "pairs()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pendingEmergencyCouncil()": FunctionFragment;
    "pendingFeeManager()": FunctionFragment;
    "setEmergencyCouncil(address)": FunctionFragment;
    "setFee(bool,uint256)": FunctionFragment;
    "setFeeManager(address)": FunctionFragment;
    "setPairManager(address)": FunctionFragment;
    "stableFee()": FunctionFragment;
    "unpause()": FunctionFragment;
    "updatePrivilegedAccount(address,bool)": FunctionFragment;
    "volatileFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "FEE_PRECISION"
      | "MAX_FEE"
      | "acceptEmergencyCouncil"
      | "acceptFeeManager"
      | "allPairs"
      | "allPairsLength"
      | "createPair"
      | "emergencyCouncil"
      | "feeManager"
      | "getFee"
      | "getFeeAmount"
      | "getInitializable"
      | "getPair"
      | "init"
      | "isPair"
      | "isPrivileged"
      | "pairCodeHash"
      | "pairManager"
      | "pairs"
      | "pause"
      | "paused"
      | "pendingEmergencyCouncil"
      | "pendingFeeManager"
      | "setEmergencyCouncil"
      | "setFee"
      | "setFeeManager"
      | "setPairManager"
      | "stableFee"
      | "unpause"
      | "updatePrivilegedAccount"
      | "volatileFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "FEE_PRECISION",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptEmergencyCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptFeeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allPairs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getFee",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeAmount",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInitializable",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPrivileged",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pairCodeHash",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pairManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pairs", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingEmergencyCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingFeeManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyCouncil",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [PromiseOrValue<boolean>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "stableFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updatePrivilegedAccount",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "volatileFee",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "FEE_PRECISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptEmergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getInitializable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPrivileged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairCodeHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pairManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pairs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingEmergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pendingFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stableFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updatePrivilegedAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volatileFee",
    data: BytesLike
  ): Result;

  events: {
    "PairCreated(address,address,bool,address,uint256)": EventFragment;
    "Paused(address)": EventFragment;
    "PrivilegedAccountStatusUpdated(address,bool)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PairCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PrivilegedAccountStatusUpdated"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface PairCreatedEventObject {
  token0: string;
  token1: string;
  stable: boolean;
  pair: string;
  arg4: BigNumber;
}
export type PairCreatedEvent = TypedEvent<
  [string, string, boolean, string, BigNumber],
  PairCreatedEventObject
>;

export type PairCreatedEventFilter = TypedEventFilter<PairCreatedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PrivilegedAccountStatusUpdatedEventObject {
  account: string;
  _added: boolean;
}
export type PrivilegedAccountStatusUpdatedEvent = TypedEvent<
  [string, boolean],
  PrivilegedAccountStatusUpdatedEventObject
>;

export type PrivilegedAccountStatusUpdatedEventFilter =
  TypedEventFilter<PrivilegedAccountStatusUpdatedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface PairFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PairFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    FEE_PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptEmergencyCouncil(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    acceptFeeManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyCouncil(overrides?: CallOverrides): Promise<[string]>;

    feeManager(overrides?: CallOverrides): Promise<[string]>;

    getFee(
      _stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFeeAmount(
      _stable: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getInitializable(
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    init(
      _fee_manager: PromiseOrValue<string>,
      _pair_manager: PromiseOrValue<string>,
      _emergency_council: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPrivileged(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    pairCodeHash(overrides?: CallOverrides): Promise<[string]>;

    pairManager(overrides?: CallOverrides): Promise<[string]>;

    pairs(overrides?: CallOverrides): Promise<[string[]]>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pendingEmergencyCouncil(overrides?: CallOverrides): Promise<[string]>;

    pendingFeeManager(overrides?: CallOverrides): Promise<[string]>;

    setEmergencyCouncil(
      _emergencyCouncil: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFee(
      _stable: PromiseOrValue<boolean>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPairManager(
      _pairManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stableFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatePrivilegedAccount(
      _account: PromiseOrValue<string>,
      _addToPrivileged: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    volatileFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  FEE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  acceptEmergencyCouncil(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  acceptFeeManager(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  allPairs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    stable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyCouncil(overrides?: CallOverrides): Promise<string>;

  feeManager(overrides?: CallOverrides): Promise<string>;

  getFee(
    _stable: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFeeAmount(
    _stable: PromiseOrValue<boolean>,
    _amount: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getInitializable(
    overrides?: CallOverrides
  ): Promise<[string, string, boolean]>;

  getPair(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<string>,
    arg2: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  init(
    _fee_manager: PromiseOrValue<string>,
    _pair_manager: PromiseOrValue<string>,
    _emergency_council: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isPair(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPrivileged(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  pairCodeHash(overrides?: CallOverrides): Promise<string>;

  pairManager(overrides?: CallOverrides): Promise<string>;

  pairs(overrides?: CallOverrides): Promise<string[]>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pendingEmergencyCouncil(overrides?: CallOverrides): Promise<string>;

  pendingFeeManager(overrides?: CallOverrides): Promise<string>;

  setEmergencyCouncil(
    _emergencyCouncil: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFee(
    _stable: PromiseOrValue<boolean>,
    _fee: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeManager(
    _feeManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPairManager(
    _pairManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stableFee(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatePrivilegedAccount(
    _account: PromiseOrValue<string>,
    _addToPrivileged: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  volatileFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    FEE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptEmergencyCouncil(overrides?: CallOverrides): Promise<void>;

    acceptFeeManager(overrides?: CallOverrides): Promise<void>;

    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    emergencyCouncil(overrides?: CallOverrides): Promise<string>;

    feeManager(overrides?: CallOverrides): Promise<string>;

    getFee(
      _stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeAmount(
      _stable: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitializable(
      overrides?: CallOverrides
    ): Promise<[string, string, boolean]>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    init(
      _fee_manager: PromiseOrValue<string>,
      _pair_manager: PromiseOrValue<string>,
      _emergency_council: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPrivileged(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    pairCodeHash(overrides?: CallOverrides): Promise<string>;

    pairManager(overrides?: CallOverrides): Promise<string>;

    pairs(overrides?: CallOverrides): Promise<string[]>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pendingEmergencyCouncil(overrides?: CallOverrides): Promise<string>;

    pendingFeeManager(overrides?: CallOverrides): Promise<string>;

    setEmergencyCouncil(
      _emergencyCouncil: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFee(
      _stable: PromiseOrValue<boolean>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairManager(
      _pairManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    stableFee(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePrivilegedAccount(
      _account: PromiseOrValue<string>,
      _addToPrivileged: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    volatileFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "PairCreated(address,address,bool,address,uint256)"(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      stable?: null,
      pair?: null,
      arg4?: null
    ): PairCreatedEventFilter;
    PairCreated(
      token0?: PromiseOrValue<string> | null,
      token1?: PromiseOrValue<string> | null,
      stable?: null,
      pair?: null,
      arg4?: null
    ): PairCreatedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PrivilegedAccountStatusUpdated(address,bool)"(
      account?: PromiseOrValue<string> | null,
      _added?: null
    ): PrivilegedAccountStatusUpdatedEventFilter;
    PrivilegedAccountStatusUpdated(
      account?: PromiseOrValue<string> | null,
      _added?: null
    ): PrivilegedAccountStatusUpdatedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    FEE_PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    acceptEmergencyCouncil(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    acceptFeeManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyCouncil(overrides?: CallOverrides): Promise<BigNumber>;

    feeManager(overrides?: CallOverrides): Promise<BigNumber>;

    getFee(
      _stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeAmount(
      _stable: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInitializable(overrides?: CallOverrides): Promise<BigNumber>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    init(
      _fee_manager: PromiseOrValue<string>,
      _pair_manager: PromiseOrValue<string>,
      _emergency_council: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPrivileged(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pairCodeHash(overrides?: CallOverrides): Promise<BigNumber>;

    pairManager(overrides?: CallOverrides): Promise<BigNumber>;

    pairs(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pendingEmergencyCouncil(overrides?: CallOverrides): Promise<BigNumber>;

    pendingFeeManager(overrides?: CallOverrides): Promise<BigNumber>;

    setEmergencyCouncil(
      _emergencyCouncil: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFee(
      _stable: PromiseOrValue<boolean>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPairManager(
      _pairManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stableFee(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatePrivilegedAccount(
      _account: PromiseOrValue<string>,
      _addToPrivileged: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    volatileFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    FEE_PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptEmergencyCouncil(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    acceptFeeManager(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    allPairs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyCouncil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getFee(
      _stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeAmount(
      _stable: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInitializable(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPair(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<string>,
      arg2: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _fee_manager: PromiseOrValue<string>,
      _pair_manager: PromiseOrValue<string>,
      _emergency_council: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isPair(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPrivileged(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pairCodeHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingEmergencyCouncil(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingFeeManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEmergencyCouncil(
      _emergencyCouncil: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFee(
      _stable: PromiseOrValue<boolean>,
      _fee: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeManager(
      _feeManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPairManager(
      _pairManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stableFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatePrivilegedAccount(
      _account: PromiseOrValue<string>,
      _addToPrivileged: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    volatileFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
