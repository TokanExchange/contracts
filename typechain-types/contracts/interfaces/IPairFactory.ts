/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IPairFactoryInterface extends utils.Interface {
  functions: {
    "allPairs(uint256)": FunctionFragment;
    "allPairsLength()": FunctionFragment;
    "createPair(address,address,bool)": FunctionFragment;
    "getFeeAmount(bool,uint256,address)": FunctionFragment;
    "getPair(address,address,bool)": FunctionFragment;
    "isPair(address)": FunctionFragment;
    "isPrivileged(address)": FunctionFragment;
    "stableFee()": FunctionFragment;
    "volatileFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allPairs"
      | "allPairsLength"
      | "createPair"
      | "getFeeAmount"
      | "getPair"
      | "isPair"
      | "isPrivileged"
      | "stableFee"
      | "volatileFee"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "allPairs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "allPairsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createPair",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeAmount",
    values: [
      PromiseOrValue<boolean>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isPair",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPrivileged",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "stableFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "volatileFee",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "allPairs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPairsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isPrivileged",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stableFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "volatileFee",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPairFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPairFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allPairs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    allPairsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getFeeAmount(
      _stable: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPair(
      tokenA: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isPair(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPrivileged(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    stableFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    volatileFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  allPairs(
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

  createPair(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    stable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getFeeAmount(
    _stable: PromiseOrValue<boolean>,
    _amount: PromiseOrValue<BigNumberish>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPair(
    tokenA: PromiseOrValue<string>,
    token: PromiseOrValue<string>,
    stable: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<string>;

  isPair(
    pair: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPrivileged(
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  stableFee(overrides?: CallOverrides): Promise<BigNumber>;

  volatileFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    allPairs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeeAmount(
      _stable: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      tokenA: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<string>;

    isPair(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPrivileged(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    stableFee(overrides?: CallOverrides): Promise<BigNumber>;

    volatileFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    allPairs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    allPairsLength(overrides?: CallOverrides): Promise<BigNumber>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getFeeAmount(
      _stable: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      tokenA: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPair(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPrivileged(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    stableFee(overrides?: CallOverrides): Promise<BigNumber>;

    volatileFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    allPairs(
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPairsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createPair(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getFeeAmount(
      _stable: PromiseOrValue<boolean>,
      _amount: PromiseOrValue<BigNumberish>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      tokenA: PromiseOrValue<string>,
      token: PromiseOrValue<string>,
      stable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPair(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPrivileged(
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    stableFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    volatileFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
