/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface VoterInterface extends utils.Interface {
  functions: {
    "_epochTimestamp()": FunctionFragment;
    "_ve()": FunctionFragment;
    "blacklist(address[])": FunctionFragment;
    "bribefactory()": FunctionFragment;
    "claimBribes(address[],address[][],uint256)": FunctionFragment;
    "claimFees(address[],address[][],uint256)": FunctionFragment;
    "claimable(address)": FunctionFragment;
    "createGauge(address)": FunctionFragment;
    "distribute(address[])": FunctionFragment;
    "distribute(uint256,uint256)": FunctionFragment;
    "distributeAll()": FunctionFragment;
    "distributeFees(address[])": FunctionFragment;
    "emergencyCouncil()": FunctionFragment;
    "emitDeposit(uint256,address,uint256)": FunctionFragment;
    "emitWithdraw(uint256,address,uint256)": FunctionFragment;
    "external_bribes(address)": FunctionFragment;
    "factory()": FunctionFragment;
    "gaugefactory()": FunctionFragment;
    "gauges(address)": FunctionFragment;
    "gaugesDistributionTimestamp(address)": FunctionFragment;
    "getIncentivizedPools()": FunctionFragment;
    "governor()": FunctionFragment;
    "increaseGaugeApprovals(address)": FunctionFragment;
    "init(address,address,address,address[])": FunctionFragment;
    "initGauges(address[],address[])": FunctionFragment;
    "internal_bribes(address)": FunctionFragment;
    "isAlive(address)": FunctionFragment;
    "isBribe(address)": FunctionFragment;
    "isGauge(address)": FunctionFragment;
    "isWhitelisted(address)": FunctionFragment;
    "killGauge(address)": FunctionFragment;
    "lastVoted(uint256)": FunctionFragment;
    "length()": FunctionFragment;
    "minter()": FunctionFragment;
    "notifyRewardAmount(uint256)": FunctionFragment;
    "poke(uint256)": FunctionFragment;
    "poolForGauge(address)": FunctionFragment;
    "poolVote(uint256,uint256)": FunctionFragment;
    "poolVoteLength(uint256)": FunctionFragment;
    "pools(uint256)": FunctionFragment;
    "reinitialize()": FunctionFragment;
    "reset(uint256)": FunctionFragment;
    "reviveGauge(address)": FunctionFragment;
    "setBribeFactory(address)": FunctionFragment;
    "setEmergencyCouncil(address)": FunctionFragment;
    "setGaugeFactory(address)": FunctionFragment;
    "setGovernor(address)": FunctionFragment;
    "setMinter(address)": FunctionFragment;
    "setNewBribe(address,address,address)": FunctionFragment;
    "setPairFactory(address)": FunctionFragment;
    "setVotingEscrow(address)": FunctionFragment;
    "totalWeight()": FunctionFragment;
    "totalWeightAt(uint256)": FunctionFragment;
    "vote(uint256,address[],uint256[])": FunctionFragment;
    "votes(uint256,address)": FunctionFragment;
    "weights(address)": FunctionFragment;
    "weightsAt(address,uint256)": FunctionFragment;
    "whitelist(address)": FunctionFragment;
    "whitelist(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "_epochTimestamp"
      | "_ve"
      | "blacklist"
      | "bribefactory"
      | "claimBribes"
      | "claimFees"
      | "claimable"
      | "createGauge"
      | "distribute(address[])"
      | "distribute(uint256,uint256)"
      | "distributeAll"
      | "distributeFees"
      | "emergencyCouncil"
      | "emitDeposit"
      | "emitWithdraw"
      | "external_bribes"
      | "factory"
      | "gaugefactory"
      | "gauges"
      | "gaugesDistributionTimestamp"
      | "getIncentivizedPools"
      | "governor"
      | "increaseGaugeApprovals"
      | "init"
      | "initGauges"
      | "internal_bribes"
      | "isAlive"
      | "isBribe"
      | "isGauge"
      | "isWhitelisted"
      | "killGauge"
      | "lastVoted"
      | "length"
      | "minter"
      | "notifyRewardAmount"
      | "poke"
      | "poolForGauge"
      | "poolVote"
      | "poolVoteLength"
      | "pools"
      | "reinitialize"
      | "reset"
      | "reviveGauge"
      | "setBribeFactory"
      | "setEmergencyCouncil"
      | "setGaugeFactory"
      | "setGovernor"
      | "setMinter"
      | "setNewBribe"
      | "setPairFactory"
      | "setVotingEscrow"
      | "totalWeight"
      | "totalWeightAt"
      | "vote"
      | "votes"
      | "weights"
      | "weightsAt"
      | "whitelist(address)"
      | "whitelist(address[])"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "_epochTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "blacklist",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bribefactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "claimBribes",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[][],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimFees",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[][],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "claimable",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGauge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "distribute(uint256,uint256)",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeAll",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "distributeFees",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyCouncil",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emitDeposit",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emitWithdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "external_bribes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gaugefactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "gauges",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "gaugesDistributionTimestamp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getIncentivizedPools",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseGaugeApprovals",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initGauges",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "internal_bribes",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isAlive",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isBribe",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isGauge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelisted",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "killGauge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "lastVoted",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "length", values?: undefined): string;
  encodeFunctionData(functionFragment: "minter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "notifyRewardAmount",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poke",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolForGauge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolVote",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "poolVoteLength",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "pools",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reinitialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reset",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "reviveGauge",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setBribeFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmergencyCouncil",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGaugeFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGovernor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewBribe",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setPairFactory",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingEscrow",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeight",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalWeightAt",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votes",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "weights",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "weightsAt",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist(address)",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whitelist(address[])",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "_epochTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "blacklist", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bribefactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimBribes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "claimFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimable", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distribute(address[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distribute(uint256,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emitWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "external_bribes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gaugefactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gauges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gaugesDistributionTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIncentivizedPools",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseGaugeApprovals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initGauges", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "internal_bribes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isAlive", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isBribe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isGauge", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelisted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "killGauge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "length", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "notifyRewardAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poke", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolForGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "poolVoteLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reinitialize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reset", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reviveGauge",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setBribeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmergencyCouncil",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGaugeFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalWeightAt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "votes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weights", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weightsAt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whitelist(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whitelist(address[])",
    data: BytesLike
  ): Result;

  events: {
    "Abstained(uint256,uint256)": EventFragment;
    "Blacklisted(address,address)": EventFragment;
    "Deposit(address,address,uint256,uint256)": EventFragment;
    "DistributeReward(address,address,uint256)": EventFragment;
    "GaugeCreated(address,address,address,address,address)": EventFragment;
    "GaugeKilled(address)": EventFragment;
    "GaugeRevived(address)": EventFragment;
    "NotifyReward(address,address,uint256)": EventFragment;
    "Voted(address,uint256,uint256)": EventFragment;
    "Whitelisted(address,address)": EventFragment;
    "Withdraw(address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Abstained"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Blacklisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DistributeReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GaugeCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GaugeKilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GaugeRevived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NotifyReward"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Whitelisted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AbstainedEventObject {
  tokenId: BigNumber;
  weight: BigNumber;
}
export type AbstainedEvent = TypedEvent<
  [BigNumber, BigNumber],
  AbstainedEventObject
>;

export type AbstainedEventFilter = TypedEventFilter<AbstainedEvent>;

export interface BlacklistedEventObject {
  blacklister: string;
  token: string;
}
export type BlacklistedEvent = TypedEvent<
  [string, string],
  BlacklistedEventObject
>;

export type BlacklistedEventFilter = TypedEventFilter<BlacklistedEvent>;

export interface DepositEventObject {
  lp: string;
  gauge: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface DistributeRewardEventObject {
  sender: string;
  gauge: string;
  amount: BigNumber;
}
export type DistributeRewardEvent = TypedEvent<
  [string, string, BigNumber],
  DistributeRewardEventObject
>;

export type DistributeRewardEventFilter =
  TypedEventFilter<DistributeRewardEvent>;

export interface GaugeCreatedEventObject {
  gauge: string;
  creator: string;
  internal_bribe: string;
  external_bribe: string;
  pool: string;
}
export type GaugeCreatedEvent = TypedEvent<
  [string, string, string, string, string],
  GaugeCreatedEventObject
>;

export type GaugeCreatedEventFilter = TypedEventFilter<GaugeCreatedEvent>;

export interface GaugeKilledEventObject {
  gauge: string;
}
export type GaugeKilledEvent = TypedEvent<[string], GaugeKilledEventObject>;

export type GaugeKilledEventFilter = TypedEventFilter<GaugeKilledEvent>;

export interface GaugeRevivedEventObject {
  gauge: string;
}
export type GaugeRevivedEvent = TypedEvent<[string], GaugeRevivedEventObject>;

export type GaugeRevivedEventFilter = TypedEventFilter<GaugeRevivedEvent>;

export interface NotifyRewardEventObject {
  sender: string;
  reward: string;
  amount: BigNumber;
}
export type NotifyRewardEvent = TypedEvent<
  [string, string, BigNumber],
  NotifyRewardEventObject
>;

export type NotifyRewardEventFilter = TypedEventFilter<NotifyRewardEvent>;

export interface VotedEventObject {
  voter: string;
  tokenId: BigNumber;
  weight: BigNumber;
}
export type VotedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  VotedEventObject
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface WhitelistedEventObject {
  whitelister: string;
  token: string;
}
export type WhitelistedEvent = TypedEvent<
  [string, string],
  WhitelistedEventObject
>;

export type WhitelistedEventFilter = TypedEventFilter<WhitelistedEvent>;

export interface WithdrawEventObject {
  lp: string;
  gauge: string;
  tokenId: BigNumber;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Voter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VoterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    _epochTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    _ve(overrides?: CallOverrides): Promise<[string]>;

    blacklist(
      _token: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    bribefactory(overrides?: CallOverrides): Promise<[string]>;

    claimBribes(
      _bribes: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[][],
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimFees(
      _fees: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[][],
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    claimable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createGauge(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "distribute(address[])"(
      _gauges: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "distribute(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      finish: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeFees(
      _gauges: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emergencyCouncil(overrides?: CallOverrides): Promise<[string]>;

    emitDeposit(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitWithdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    external_bribes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    gaugefactory(overrides?: CallOverrides): Promise<[string]>;

    gauges(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gaugesDistributionTimestamp(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getIncentivizedPools(overrides?: CallOverrides): Promise<[string[]]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    increaseGaugeApprovals(
      _gauge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    init(
      _minter: PromiseOrValue<string>,
      _governor: PromiseOrValue<string>,
      _emergency_council: PromiseOrValue<string>,
      _whitelist_tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initGauges(
      _gauges: PromiseOrValue<string>[],
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    internal_bribes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isAlive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isBribe(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isGauge(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    killGauge(
      _gauge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lastVoted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    length(overrides?: CallOverrides): Promise<[BigNumber]>;

    minter(overrides?: CallOverrides): Promise<[string]>;

    notifyRewardAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poke(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    poolForGauge(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolVote(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    poolVoteLength(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    reinitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reset(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    reviveGauge(
      _gauge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBribeFactory(
      _bribeFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setEmergencyCouncil(
      _council: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGaugeFactory(
      _gaugeFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNewBribe(
      _gauge: PromiseOrValue<string>,
      _internal: PromiseOrValue<string>,
      _external: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPairFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVotingEscrow(
      _votingEscrow: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalWeightAt(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vote(
      _tokenId: PromiseOrValue<BigNumberish>,
      _poolVote: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    weights(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    weightsAt(
      _pool: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "whitelist(address)"(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "whitelist(address[])"(
      _token: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  _epochTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  _ve(overrides?: CallOverrides): Promise<string>;

  blacklist(
    _token: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  bribefactory(overrides?: CallOverrides): Promise<string>;

  claimBribes(
    _bribes: PromiseOrValue<string>[],
    _tokens: PromiseOrValue<string>[][],
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimFees(
    _fees: PromiseOrValue<string>[],
    _tokens: PromiseOrValue<string>[][],
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  claimable(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  createGauge(
    _pool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "distribute(address[])"(
    _gauges: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "distribute(uint256,uint256)"(
    start: PromiseOrValue<BigNumberish>,
    finish: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeAll(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeFees(
    _gauges: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emergencyCouncil(overrides?: CallOverrides): Promise<string>;

  emitDeposit(
    tokenId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitWithdraw(
    tokenId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  external_bribes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  factory(overrides?: CallOverrides): Promise<string>;

  gaugefactory(overrides?: CallOverrides): Promise<string>;

  gauges(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  gaugesDistributionTimestamp(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getIncentivizedPools(overrides?: CallOverrides): Promise<string[]>;

  governor(overrides?: CallOverrides): Promise<string>;

  increaseGaugeApprovals(
    _gauge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  init(
    _minter: PromiseOrValue<string>,
    _governor: PromiseOrValue<string>,
    _emergency_council: PromiseOrValue<string>,
    _whitelist_tokens: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initGauges(
    _gauges: PromiseOrValue<string>[],
    _pools: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  internal_bribes(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isAlive(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isBribe(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isGauge(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isWhitelisted(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  killGauge(
    _gauge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lastVoted(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  length(overrides?: CallOverrides): Promise<BigNumber>;

  minter(overrides?: CallOverrides): Promise<string>;

  notifyRewardAmount(
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poke(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  poolForGauge(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  poolVote(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  poolVoteLength(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  pools(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  reinitialize(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reset(
    _tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  reviveGauge(
    _gauge: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBribeFactory(
    _bribeFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setEmergencyCouncil(
    _council: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGaugeFactory(
    _gaugeFactory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGovernor(
    _governor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinter(
    _minter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNewBribe(
    _gauge: PromiseOrValue<string>,
    _internal: PromiseOrValue<string>,
    _external: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPairFactory(
    _factory: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVotingEscrow(
    _votingEscrow: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

  totalWeightAt(
    _time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vote(
    _tokenId: PromiseOrValue<BigNumberish>,
    _poolVote: PromiseOrValue<string>[],
    _weights: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votes(
    arg0: PromiseOrValue<BigNumberish>,
    arg1: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weights(
    _pool: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  weightsAt(
    _pool: PromiseOrValue<string>,
    _time: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "whitelist(address)"(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "whitelist(address[])"(
    _token: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _epochTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    _ve(overrides?: CallOverrides): Promise<string>;

    blacklist(
      _token: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    bribefactory(overrides?: CallOverrides): Promise<string>;

    claimBribes(
      _bribes: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[][],
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimFees(
      _fees: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[][],
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    claimable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createGauge(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    "distribute(address[])"(
      _gauges: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "distribute(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      finish: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    distributeAll(overrides?: CallOverrides): Promise<void>;

    distributeFees(
      _gauges: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyCouncil(overrides?: CallOverrides): Promise<string>;

    emitDeposit(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    emitWithdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    external_bribes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    factory(overrides?: CallOverrides): Promise<string>;

    gaugefactory(overrides?: CallOverrides): Promise<string>;

    gauges(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    gaugesDistributionTimestamp(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncentivizedPools(overrides?: CallOverrides): Promise<string[]>;

    governor(overrides?: CallOverrides): Promise<string>;

    increaseGaugeApprovals(
      _gauge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    init(
      _minter: PromiseOrValue<string>,
      _governor: PromiseOrValue<string>,
      _emergency_council: PromiseOrValue<string>,
      _whitelist_tokens: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    initGauges(
      _gauges: PromiseOrValue<string>[],
      _pools: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    internal_bribes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isAlive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isBribe(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isGauge(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    killGauge(
      _gauge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    lastVoted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<string>;

    notifyRewardAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    poke(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    poolForGauge(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    poolVote(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    poolVoteLength(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    reinitialize(overrides?: CallOverrides): Promise<void>;

    reset(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    reviveGauge(
      _gauge: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setBribeFactory(
      _bribeFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setEmergencyCouncil(
      _council: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGaugeFactory(
      _gaugeFactory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinter(
      _minter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNewBribe(
      _gauge: PromiseOrValue<string>,
      _internal: PromiseOrValue<string>,
      _external: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPairFactory(
      _factory: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVotingEscrow(
      _votingEscrow: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeightAt(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      _tokenId: PromiseOrValue<BigNumberish>,
      _poolVote: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weights(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weightsAt(
      _pool: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelist(address)"(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "whitelist(address[])"(
      _token: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Abstained(uint256,uint256)"(
      tokenId?: null,
      weight?: null
    ): AbstainedEventFilter;
    Abstained(tokenId?: null, weight?: null): AbstainedEventFilter;

    "Blacklisted(address,address)"(
      blacklister?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): BlacklistedEventFilter;
    Blacklisted(
      blacklister?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): BlacklistedEventFilter;

    "Deposit(address,address,uint256,uint256)"(
      lp?: PromiseOrValue<string> | null,
      gauge?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null
    ): DepositEventFilter;
    Deposit(
      lp?: PromiseOrValue<string> | null,
      gauge?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null
    ): DepositEventFilter;

    "DistributeReward(address,address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      gauge?: PromiseOrValue<string> | null,
      amount?: null
    ): DistributeRewardEventFilter;
    DistributeReward(
      sender?: PromiseOrValue<string> | null,
      gauge?: PromiseOrValue<string> | null,
      amount?: null
    ): DistributeRewardEventFilter;

    "GaugeCreated(address,address,address,address,address)"(
      gauge?: PromiseOrValue<string> | null,
      creator?: null,
      internal_bribe?: null,
      external_bribe?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null
    ): GaugeCreatedEventFilter;
    GaugeCreated(
      gauge?: PromiseOrValue<string> | null,
      creator?: null,
      internal_bribe?: null,
      external_bribe?: PromiseOrValue<string> | null,
      pool?: PromiseOrValue<string> | null
    ): GaugeCreatedEventFilter;

    "GaugeKilled(address)"(
      gauge?: PromiseOrValue<string> | null
    ): GaugeKilledEventFilter;
    GaugeKilled(gauge?: PromiseOrValue<string> | null): GaugeKilledEventFilter;

    "GaugeRevived(address)"(
      gauge?: PromiseOrValue<string> | null
    ): GaugeRevivedEventFilter;
    GaugeRevived(
      gauge?: PromiseOrValue<string> | null
    ): GaugeRevivedEventFilter;

    "NotifyReward(address,address,uint256)"(
      sender?: PromiseOrValue<string> | null,
      reward?: PromiseOrValue<string> | null,
      amount?: null
    ): NotifyRewardEventFilter;
    NotifyReward(
      sender?: PromiseOrValue<string> | null,
      reward?: PromiseOrValue<string> | null,
      amount?: null
    ): NotifyRewardEventFilter;

    "Voted(address,uint256,uint256)"(
      voter?: PromiseOrValue<string> | null,
      tokenId?: null,
      weight?: null
    ): VotedEventFilter;
    Voted(
      voter?: PromiseOrValue<string> | null,
      tokenId?: null,
      weight?: null
    ): VotedEventFilter;

    "Whitelisted(address,address)"(
      whitelister?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): WhitelistedEventFilter;
    Whitelisted(
      whitelister?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null
    ): WhitelistedEventFilter;

    "Withdraw(address,address,uint256,uint256)"(
      lp?: PromiseOrValue<string> | null,
      gauge?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(
      lp?: PromiseOrValue<string> | null,
      gauge?: PromiseOrValue<string> | null,
      tokenId?: null,
      amount?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    _epochTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    _ve(overrides?: CallOverrides): Promise<BigNumber>;

    blacklist(
      _token: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    bribefactory(overrides?: CallOverrides): Promise<BigNumber>;

    claimBribes(
      _bribes: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[][],
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimFees(
      _fees: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[][],
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    claimable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createGauge(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "distribute(address[])"(
      _gauges: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "distribute(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      finish: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeFees(
      _gauges: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emergencyCouncil(overrides?: CallOverrides): Promise<BigNumber>;

    emitDeposit(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitWithdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    external_bribes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    gaugefactory(overrides?: CallOverrides): Promise<BigNumber>;

    gauges(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gaugesDistributionTimestamp(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getIncentivizedPools(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    increaseGaugeApprovals(
      _gauge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    init(
      _minter: PromiseOrValue<string>,
      _governor: PromiseOrValue<string>,
      _emergency_council: PromiseOrValue<string>,
      _whitelist_tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initGauges(
      _gauges: PromiseOrValue<string>[],
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    internal_bribes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isAlive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isBribe(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isGauge(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    killGauge(
      _gauge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lastVoted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    length(overrides?: CallOverrides): Promise<BigNumber>;

    minter(overrides?: CallOverrides): Promise<BigNumber>;

    notifyRewardAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poke(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    poolForGauge(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolVote(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    poolVoteLength(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    reinitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reset(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    reviveGauge(
      _gauge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBribeFactory(
      _bribeFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setEmergencyCouncil(
      _council: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGaugeFactory(
      _gaugeFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNewBribe(
      _gauge: PromiseOrValue<string>,
      _internal: PromiseOrValue<string>,
      _external: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPairFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVotingEscrow(
      _votingEscrow: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    totalWeight(overrides?: CallOverrides): Promise<BigNumber>;

    totalWeightAt(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      _tokenId: PromiseOrValue<BigNumberish>,
      _poolVote: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weights(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weightsAt(
      _pool: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "whitelist(address)"(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "whitelist(address[])"(
      _token: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _epochTimestamp(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _ve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blacklist(
      _token: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    bribefactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimBribes(
      _bribes: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[][],
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimFees(
      _fees: PromiseOrValue<string>[],
      _tokens: PromiseOrValue<string>[][],
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    claimable(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createGauge(
      _pool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "distribute(address[])"(
      _gauges: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "distribute(uint256,uint256)"(
      start: PromiseOrValue<BigNumberish>,
      finish: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeAll(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeFees(
      _gauges: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emergencyCouncil(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emitDeposit(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitWithdraw(
      tokenId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    external_bribes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gaugefactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gauges(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gaugesDistributionTimestamp(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIncentivizedPools(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseGaugeApprovals(
      _gauge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    init(
      _minter: PromiseOrValue<string>,
      _governor: PromiseOrValue<string>,
      _emergency_council: PromiseOrValue<string>,
      _whitelist_tokens: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initGauges(
      _gauges: PromiseOrValue<string>[],
      _pools: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    internal_bribes(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isAlive(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBribe(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isGauge(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isWhitelisted(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    killGauge(
      _gauge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lastVoted(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    length(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    notifyRewardAmount(
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poke(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    poolForGauge(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolVote(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    poolVoteLength(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pools(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    reinitialize(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reset(
      _tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    reviveGauge(
      _gauge: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBribeFactory(
      _bribeFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setEmergencyCouncil(
      _council: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGaugeFactory(
      _gaugeFactory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGovernor(
      _governor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinter(
      _minter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNewBribe(
      _gauge: PromiseOrValue<string>,
      _internal: PromiseOrValue<string>,
      _external: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPairFactory(
      _factory: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVotingEscrow(
      _votingEscrow: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    totalWeight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalWeightAt(
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      _tokenId: PromiseOrValue<BigNumberish>,
      _poolVote: PromiseOrValue<string>[],
      _weights: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votes(
      arg0: PromiseOrValue<BigNumberish>,
      arg1: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weights(
      _pool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weightsAt(
      _pool: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "whitelist(address)"(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "whitelist(address[])"(
      _token: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
