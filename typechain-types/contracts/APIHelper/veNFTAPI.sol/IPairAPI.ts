/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../common";

export declare namespace IPairAPI {
  export type PairInfoStruct = {
    pair_address: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
    stable: PromiseOrValue<boolean>;
    total_supply: PromiseOrValue<BigNumberish>;
    token0: PromiseOrValue<string>;
    token0_symbol: PromiseOrValue<string>;
    token0_decimals: PromiseOrValue<BigNumberish>;
    reserve0: PromiseOrValue<BigNumberish>;
    claimable0: PromiseOrValue<BigNumberish>;
    token1: PromiseOrValue<string>;
    token1_symbol: PromiseOrValue<string>;
    token1_decimals: PromiseOrValue<BigNumberish>;
    reserve1: PromiseOrValue<BigNumberish>;
    claimable1: PromiseOrValue<BigNumberish>;
    gauge: PromiseOrValue<string>;
    gauge_total_supply: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<string>;
    bribe: PromiseOrValue<string>;
    weight: PromiseOrValue<BigNumberish>;
    emissions: PromiseOrValue<BigNumberish>;
    emissions_token: PromiseOrValue<string>;
    emissions_token_decimals: PromiseOrValue<BigNumberish>;
    account_lp_balance: PromiseOrValue<BigNumberish>;
    account_token0_balance: PromiseOrValue<BigNumberish>;
    account_token1_balance: PromiseOrValue<BigNumberish>;
    account_gauge_balance: PromiseOrValue<BigNumberish>;
    account_gauge_earned: PromiseOrValue<BigNumberish>;
  };

  export type PairInfoStructOutput = [
    string,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    pair_address: string;
    symbol: string;
    name: string;
    decimals: BigNumber;
    stable: boolean;
    total_supply: BigNumber;
    token0: string;
    token0_symbol: string;
    token0_decimals: BigNumber;
    reserve0: BigNumber;
    claimable0: BigNumber;
    token1: string;
    token1_symbol: string;
    token1_decimals: BigNumber;
    reserve1: BigNumber;
    claimable1: BigNumber;
    gauge: string;
    gauge_total_supply: BigNumber;
    fee: string;
    bribe: string;
    weight: BigNumber;
    emissions: BigNumber;
    emissions_token: string;
    emissions_token_decimals: BigNumber;
    account_lp_balance: BigNumber;
    account_token0_balance: BigNumber;
    account_token1_balance: BigNumber;
    account_gauge_balance: BigNumber;
    account_gauge_earned: BigNumber;
  };
}

export interface IPairAPIInterface extends utils.Interface {
  functions: {
    "getPair(address,address)": FunctionFragment;
    "pair_factory()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getPair" | "pair_factory"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getPair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "pair_factory",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pair_factory",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPairAPI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPairAPIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getPair(
      _pair: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IPairAPI.PairInfoStructOutput] & {
        _pairInfo: IPairAPI.PairInfoStructOutput;
      }
    >;

    pair_factory(overrides?: CallOverrides): Promise<[string]>;
  };

  getPair(
    _pair: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IPairAPI.PairInfoStructOutput>;

  pair_factory(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    getPair(
      _pair: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IPairAPI.PairInfoStructOutput>;

    pair_factory(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    getPair(
      _pair: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pair_factory(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getPair(
      _pair: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pair_factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
