/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace RewardAPI {
  export type BribesStruct = {
    tokens: PromiseOrValue<string>[];
    symbols: PromiseOrValue<string>[];
    decimals: PromiseOrValue<BigNumberish>[];
    amounts: PromiseOrValue<BigNumberish>[];
  };

  export type BribesStructOutput = [
    string[],
    string[],
    BigNumber[],
    BigNumber[]
  ] & {
    tokens: string[];
    symbols: string[];
    decimals: BigNumber[];
    amounts: BigNumber[];
  };

  export type RewardsStruct = { bribes: RewardAPI.BribesStruct[] };

  export type RewardsStructOutput = [RewardAPI.BribesStructOutput[]] & {
    bribes: RewardAPI.BribesStructOutput[];
  };
}

export interface RewardAPIInterface extends utils.Interface {
  functions: {
    "addNotReward(address)": FunctionFragment;
    "getExpectedClaimForNextEpoch(uint256,address[])": FunctionFragment;
    "getPairBribe(address)": FunctionFragment;
    "hasPendingRewards(uint256,address[])": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "notReward(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairFactory()": FunctionFragment;
    "removeNotReward(address)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setVoter(address)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "voter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNotReward"
      | "getExpectedClaimForNextEpoch"
      | "getPairBribe"
      | "hasPendingRewards"
      | "initialize"
      | "notReward"
      | "owner"
      | "pairFactory"
      | "removeNotReward"
      | "setOwner"
      | "setVoter"
      | "underlyingToken"
      | "voter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNotReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExpectedClaimForNextEpoch",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairBribe",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasPendingRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "notReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeNotReward",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addNotReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExpectedClaimForNextEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPairBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasPendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "notReward", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeNotReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RewardAPI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardAPIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNotReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getExpectedClaimForNextEpoch(
      tokenId: PromiseOrValue<BigNumberish>,
      pairs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[RewardAPI.RewardsStructOutput[]]>;

    getPairBribe(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[RewardAPI.BribesStructOutput[]]>;

    hasPendingRewards(
      _tokenId: PromiseOrValue<BigNumberish>,
      _pairs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    notReward(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairFactory(overrides?: CallOverrides): Promise<[string]>;

    removeNotReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoter(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    voter(overrides?: CallOverrides): Promise<[string]>;
  };

  addNotReward(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getExpectedClaimForNextEpoch(
    tokenId: PromiseOrValue<BigNumberish>,
    pairs: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<RewardAPI.RewardsStructOutput[]>;

  getPairBribe(
    pair: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<RewardAPI.BribesStructOutput[]>;

  hasPendingRewards(
    _tokenId: PromiseOrValue<BigNumberish>,
    _pairs: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  notReward(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairFactory(overrides?: CallOverrides): Promise<string>;

  removeNotReward(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoter(
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  voter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addNotReward(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getExpectedClaimForNextEpoch(
      tokenId: PromiseOrValue<BigNumberish>,
      pairs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<RewardAPI.RewardsStructOutput[]>;

    getPairBribe(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<RewardAPI.BribesStructOutput[]>;

    hasPendingRewards(
      _tokenId: PromiseOrValue<BigNumberish>,
      _pairs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    notReward(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairFactory(overrides?: CallOverrides): Promise<string>;

    removeNotReward(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoter(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    voter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;
  };

  estimateGas: {
    addNotReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getExpectedClaimForNextEpoch(
      tokenId: PromiseOrValue<BigNumberish>,
      pairs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairBribe(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasPendingRewards(
      _tokenId: PromiseOrValue<BigNumberish>,
      _pairs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    notReward(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairFactory(overrides?: CallOverrides): Promise<BigNumber>;

    removeNotReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoter(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    voter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addNotReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getExpectedClaimForNextEpoch(
      tokenId: PromiseOrValue<BigNumberish>,
      pairs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairBribe(
      pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasPendingRewards(
      _tokenId: PromiseOrValue<BigNumberish>,
      _pairs: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    notReward(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeNotReward(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoter(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
