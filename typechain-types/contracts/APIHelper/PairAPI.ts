/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace PairAPI {
  export type PairInfoStruct = {
    pair_address: PromiseOrValue<string>;
    symbol: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
    stable: PromiseOrValue<boolean>;
    total_supply: PromiseOrValue<BigNumberish>;
    token0: PromiseOrValue<string>;
    token0_symbol: PromiseOrValue<string>;
    token0_decimals: PromiseOrValue<BigNumberish>;
    reserve0: PromiseOrValue<BigNumberish>;
    claimable0: PromiseOrValue<BigNumberish>;
    token1: PromiseOrValue<string>;
    token1_symbol: PromiseOrValue<string>;
    token1_decimals: PromiseOrValue<BigNumberish>;
    reserve1: PromiseOrValue<BigNumberish>;
    claimable1: PromiseOrValue<BigNumberish>;
    gauge: PromiseOrValue<string>;
    gauge_total_supply: PromiseOrValue<BigNumberish>;
    fee: PromiseOrValue<string>;
    bribe: PromiseOrValue<string>;
    weight: PromiseOrValue<BigNumberish>;
    emissions: PromiseOrValue<BigNumberish>;
    emissions_token: PromiseOrValue<string>;
    emissions_token_decimals: PromiseOrValue<BigNumberish>;
    account_lp_balance: PromiseOrValue<BigNumberish>;
    account_token0_balance: PromiseOrValue<BigNumberish>;
    account_token1_balance: PromiseOrValue<BigNumberish>;
    account_gauge_balance: PromiseOrValue<BigNumberish>;
    account_gauge_earned: PromiseOrValue<BigNumberish>;
  };

  export type PairInfoStructOutput = [
    string,
    string,
    string,
    BigNumber,
    boolean,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    string,
    string,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    pair_address: string;
    symbol: string;
    name: string;
    decimals: BigNumber;
    stable: boolean;
    total_supply: BigNumber;
    token0: string;
    token0_symbol: string;
    token0_decimals: BigNumber;
    reserve0: BigNumber;
    claimable0: BigNumber;
    token1: string;
    token1_symbol: string;
    token1_decimals: BigNumber;
    reserve1: BigNumber;
    claimable1: BigNumber;
    gauge: string;
    gauge_total_supply: BigNumber;
    fee: string;
    bribe: string;
    weight: BigNumber;
    emissions: BigNumber;
    emissions_token: string;
    emissions_token_decimals: BigNumber;
    account_lp_balance: BigNumber;
    account_token0_balance: BigNumber;
    account_token1_balance: BigNumber;
    account_gauge_balance: BigNumber;
    account_gauge_earned: BigNumber;
  };

  export type TokenBribeStruct = {
    token: PromiseOrValue<string>;
    decimals: PromiseOrValue<BigNumberish>;
    amount: PromiseOrValue<BigNumberish>;
    symbol: PromiseOrValue<string>;
  };

  export type TokenBribeStructOutput = [string, number, BigNumber, string] & {
    token: string;
    decimals: number;
    amount: BigNumber;
    symbol: string;
  };

  export type PairBribeEpochStruct = {
    epochTimestamp: PromiseOrValue<BigNumberish>;
    totalVotes: PromiseOrValue<BigNumberish>;
    pair: PromiseOrValue<string>;
    bribes: PairAPI.TokenBribeStruct[];
  };

  export type PairBribeEpochStructOutput = [
    BigNumber,
    BigNumber,
    string,
    PairAPI.TokenBribeStructOutput[]
  ] & {
    epochTimestamp: BigNumber;
    totalVotes: BigNumber;
    pair: string;
    bribes: PairAPI.TokenBribeStructOutput[];
  };
}

export interface PairAPIInterface extends utils.Interface {
  functions: {
    "MAX_EPOCHS()": FunctionFragment;
    "MAX_PAIRS()": FunctionFragment;
    "MAX_REWARDS()": FunctionFragment;
    "WEEK()": FunctionFragment;
    "getAllPair(address,uint256,uint256)": FunctionFragment;
    "getPair(address,address)": FunctionFragment;
    "getPairBribe(uint256,uint256,address)": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "left(address,address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pairFactory()": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "setVoter(address)": FunctionFragment;
    "underlyingToken()": FunctionFragment;
    "voter()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "MAX_EPOCHS"
      | "MAX_PAIRS"
      | "MAX_REWARDS"
      | "WEEK"
      | "getAllPair"
      | "getPair"
      | "getPairBribe"
      | "initialize"
      | "left"
      | "owner"
      | "pairFactory"
      | "setOwner"
      | "setVoter"
      | "underlyingToken"
      | "voter"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "MAX_EPOCHS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MAX_PAIRS", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARDS",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "WEEK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllPair",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPair",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPairBribe",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "left",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pairFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setOwner",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "underlyingToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "voter", values?: undefined): string;

  decodeFunctionResult(functionFragment: "MAX_EPOCHS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "MAX_PAIRS", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARDS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "WEEK", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAllPair", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPair", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPairBribe",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "left", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pairFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVoter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "underlyingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "voter", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "Owner(address,address)": EventFragment;
    "Voter(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Owner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voter"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnerEventObject {
  oldOwner: string;
  newOwner: string;
}
export type OwnerEvent = TypedEvent<[string, string], OwnerEventObject>;

export type OwnerEventFilter = TypedEventFilter<OwnerEvent>;

export interface VoterEventObject {
  oldVoter: string;
  newVoter: string;
}
export type VoterEvent = TypedEvent<[string, string], VoterEventObject>;

export type VoterEventFilter = TypedEventFilter<VoterEvent>;

export interface PairAPI extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: PairAPIInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    MAX_EPOCHS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_PAIRS(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_REWARDS(overrides?: CallOverrides): Promise<[BigNumber]>;

    WEEK(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAllPair(
      _user: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [PairAPI.PairInfoStructOutput[]] & {
        Pairs: PairAPI.PairInfoStructOutput[];
      }
    >;

    getPair(
      _pair: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [PairAPI.PairInfoStructOutput] & {
        _pairInfo: PairAPI.PairInfoStructOutput;
      }
    >;

    getPairBribe(
      _amounts: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [PairAPI.PairBribeEpochStructOutput[]] & {
        _pairEpoch: PairAPI.PairBribeEpochStructOutput[];
      }
    >;

    initialize(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    left(
      _pair: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _rewPerEpoch: BigNumber }>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pairFactory(overrides?: CallOverrides): Promise<[string]>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoter(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<[string]>;

    voter(overrides?: CallOverrides): Promise<[string]>;
  };

  MAX_EPOCHS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_PAIRS(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

  WEEK(overrides?: CallOverrides): Promise<BigNumber>;

  getAllPair(
    _user: PromiseOrValue<string>,
    _amounts: PromiseOrValue<BigNumberish>,
    _offset: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<PairAPI.PairInfoStructOutput[]>;

  getPair(
    _pair: PromiseOrValue<string>,
    _account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PairAPI.PairInfoStructOutput>;

  getPairBribe(
    _amounts: PromiseOrValue<BigNumberish>,
    _offset: PromiseOrValue<BigNumberish>,
    _pair: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<PairAPI.PairBribeEpochStructOutput[]>;

  initialize(
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  left(
    _pair: PromiseOrValue<string>,
    _token: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pairFactory(overrides?: CallOverrides): Promise<string>;

  setOwner(
    _owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoter(
    _voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  underlyingToken(overrides?: CallOverrides): Promise<string>;

  voter(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    MAX_EPOCHS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PAIRS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPair(
      _user: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PairAPI.PairInfoStructOutput[]>;

    getPair(
      _pair: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PairAPI.PairInfoStructOutput>;

    getPairBribe(
      _amounts: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PairAPI.PairBribeEpochStructOutput[]>;

    initialize(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    left(
      _pair: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pairFactory(overrides?: CallOverrides): Promise<string>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoter(
      _voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    underlyingToken(overrides?: CallOverrides): Promise<string>;

    voter(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Owner(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): OwnerEventFilter;
    Owner(oldOwner?: null, newOwner?: null): OwnerEventFilter;

    "Voter(address,address)"(
      oldVoter?: null,
      newVoter?: null
    ): VoterEventFilter;
    Voter(oldVoter?: null, newVoter?: null): VoterEventFilter;
  };

  estimateGas: {
    MAX_EPOCHS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_PAIRS(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARDS(overrides?: CallOverrides): Promise<BigNumber>;

    WEEK(overrides?: CallOverrides): Promise<BigNumber>;

    getAllPair(
      _user: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPair(
      _pair: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPairBribe(
      _amounts: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    left(
      _pair: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pairFactory(overrides?: CallOverrides): Promise<BigNumber>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoter(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    underlyingToken(overrides?: CallOverrides): Promise<BigNumber>;

    voter(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_EPOCHS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_PAIRS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_REWARDS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WEEK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAllPair(
      _user: PromiseOrValue<string>,
      _amounts: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPair(
      _pair: PromiseOrValue<string>,
      _account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPairBribe(
      _amounts: PromiseOrValue<BigNumberish>,
      _offset: PromiseOrValue<BigNumberish>,
      _pair: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    left(
      _pair: PromiseOrValue<string>,
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pairFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setOwner(
      _owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoter(
      _voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    underlyingToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    voter(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
