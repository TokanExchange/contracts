/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface MinterInterface extends utils.Interface {
  functions: {
    "EMISSION()": FunctionFragment;
    "LOCK()": FunctionFragment;
    "MAX_TEAM_RATE()": FunctionFragment;
    "PRECISION()": FunctionFragment;
    "TAIL_EMISSION()": FunctionFragment;
    "_rewardsDistributor()": FunctionFragment;
    "_tokan()": FunctionFragment;
    "_ve()": FunctionFragment;
    "_voter()": FunctionFragment;
    "acceptTeam()": FunctionFragment;
    "active_period()": FunctionFragment;
    "calculate_emission()": FunctionFragment;
    "calculate_growth(uint256)": FunctionFragment;
    "check()": FunctionFragment;
    "circulating_emission()": FunctionFragment;
    "circulating_supply()": FunctionFragment;
    "init(address,address)": FunctionFragment;
    "isFirstMint()": FunctionFragment;
    "nextPeriod()": FunctionFragment;
    "pendingTeam()": FunctionFragment;
    "period()": FunctionFragment;
    "rebaseDisabled()": FunctionFragment;
    "setEmission(uint256)": FunctionFragment;
    "setRebaseDisbaled(bool)": FunctionFragment;
    "setRewardDistributor(address)": FunctionFragment;
    "setTeam(address)": FunctionFragment;
    "setTeamRate(uint256)": FunctionFragment;
    "setTkn(address,address)": FunctionFragment;
    "setVoter(address)": FunctionFragment;
    "team()": FunctionFragment;
    "teamRate()": FunctionFragment;
    "update_period()": FunctionFragment;
    "weekly()": FunctionFragment;
    "weekly_emission()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "EMISSION"
      | "LOCK"
      | "MAX_TEAM_RATE"
      | "PRECISION"
      | "TAIL_EMISSION"
      | "_rewardsDistributor"
      | "_tokan"
      | "_ve"
      | "_voter"
      | "acceptTeam"
      | "active_period"
      | "calculate_emission"
      | "calculate_growth"
      | "check"
      | "circulating_emission"
      | "circulating_supply"
      | "init"
      | "isFirstMint"
      | "nextPeriod"
      | "pendingTeam"
      | "period"
      | "rebaseDisabled"
      | "setEmission"
      | "setRebaseDisbaled"
      | "setRewardDistributor"
      | "setTeam"
      | "setTeamRate"
      | "setTkn"
      | "setVoter"
      | "team"
      | "teamRate"
      | "update_period"
      | "weekly"
      | "weekly_emission"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "EMISSION", values?: undefined): string;
  encodeFunctionData(functionFragment: "LOCK", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_TEAM_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "PRECISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "TAIL_EMISSION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_rewardsDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_tokan", values?: undefined): string;
  encodeFunctionData(functionFragment: "_ve", values?: undefined): string;
  encodeFunctionData(functionFragment: "_voter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "acceptTeam",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "active_period",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculate_emission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculate_growth",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "check", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "circulating_emission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "circulating_supply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "init",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isFirstMint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "nextPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "pendingTeam",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "period", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "rebaseDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setEmission",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRebaseDisbaled",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardDistributor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeam",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTeamRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setTkn",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setVoter",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "team", values?: undefined): string;
  encodeFunctionData(functionFragment: "teamRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "update_period",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weekly", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "weekly_emission",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "EMISSION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "LOCK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_TEAM_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "PRECISION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "TAIL_EMISSION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_rewardsDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_tokan", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_ve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_voter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "acceptTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "active_period",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculate_emission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculate_growth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "circulating_emission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "circulating_supply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isFirstMint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nextPeriod", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingTeam",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "period", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rebaseDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRebaseDisbaled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTeam", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setTeamRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTkn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "team", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "teamRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "update_period",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weekly", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "weekly_emission",
    data: BytesLike
  ): Result;

  events: {
    "Mint(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
}

export interface MintEventObject {
  sender: string;
  weekly: BigNumber;
  circulating_supply: BigNumber;
  circulating_emission: BigNumber;
}
export type MintEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  MintEventObject
>;

export type MintEventFilter = TypedEventFilter<MintEvent>;

export interface Minter extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    EMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    LOCK(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_TEAM_RATE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PRECISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    TAIL_EMISSION(overrides?: CallOverrides): Promise<[BigNumber]>;

    _rewardsDistributor(overrides?: CallOverrides): Promise<[string]>;

    _tokan(overrides?: CallOverrides): Promise<[string]>;

    _ve(overrides?: CallOverrides): Promise<[string]>;

    _voter(overrides?: CallOverrides): Promise<[string]>;

    acceptTeam(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    active_period(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculate_emission(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculate_growth(
      _weeklyMinted: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    check(overrides?: CallOverrides): Promise<[boolean]>;

    circulating_emission(overrides?: CallOverrides): Promise<[BigNumber]>;

    circulating_supply(overrides?: CallOverrides): Promise<[BigNumber]>;

    init(
      _team_msig: PromiseOrValue<string>,
      __rewardsDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isFirstMint(overrides?: CallOverrides): Promise<[boolean]>;

    nextPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendingTeam(overrides?: CallOverrides): Promise<[string]>;

    period(overrides?: CallOverrides): Promise<[BigNumber]>;

    rebaseDisabled(overrides?: CallOverrides): Promise<[boolean]>;

    setEmission(
      _emission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRebaseDisbaled(
      _disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardDistributor(
      _newRewardsDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTeam(
      _team: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTeamRate(
      _teamRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setTkn(
      __tkn: PromiseOrValue<string>,
      __ve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setVoter(
      __voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    team(overrides?: CallOverrides): Promise<[string]>;

    teamRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    update_period(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    weekly(overrides?: CallOverrides): Promise<[BigNumber]>;

    weekly_emission(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  LOCK(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_TEAM_RATE(overrides?: CallOverrides): Promise<BigNumber>;

  PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

  TAIL_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

  _rewardsDistributor(overrides?: CallOverrides): Promise<string>;

  _tokan(overrides?: CallOverrides): Promise<string>;

  _ve(overrides?: CallOverrides): Promise<string>;

  _voter(overrides?: CallOverrides): Promise<string>;

  acceptTeam(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  active_period(overrides?: CallOverrides): Promise<BigNumber>;

  calculate_emission(overrides?: CallOverrides): Promise<BigNumber>;

  calculate_growth(
    _weeklyMinted: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  check(overrides?: CallOverrides): Promise<boolean>;

  circulating_emission(overrides?: CallOverrides): Promise<BigNumber>;

  circulating_supply(overrides?: CallOverrides): Promise<BigNumber>;

  init(
    _team_msig: PromiseOrValue<string>,
    __rewardsDistributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isFirstMint(overrides?: CallOverrides): Promise<boolean>;

  nextPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  pendingTeam(overrides?: CallOverrides): Promise<string>;

  period(overrides?: CallOverrides): Promise<BigNumber>;

  rebaseDisabled(overrides?: CallOverrides): Promise<boolean>;

  setEmission(
    _emission: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRebaseDisbaled(
    _disabled: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardDistributor(
    _newRewardsDistributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTeam(
    _team: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTeamRate(
    _teamRate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setTkn(
    __tkn: PromiseOrValue<string>,
    __ve: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setVoter(
    __voter: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  team(overrides?: CallOverrides): Promise<string>;

  teamRate(overrides?: CallOverrides): Promise<BigNumber>;

  update_period(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  weekly(overrides?: CallOverrides): Promise<BigNumber>;

  weekly_emission(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TEAM_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    TAIL_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    _rewardsDistributor(overrides?: CallOverrides): Promise<string>;

    _tokan(overrides?: CallOverrides): Promise<string>;

    _ve(overrides?: CallOverrides): Promise<string>;

    _voter(overrides?: CallOverrides): Promise<string>;

    acceptTeam(overrides?: CallOverrides): Promise<void>;

    active_period(overrides?: CallOverrides): Promise<BigNumber>;

    calculate_emission(overrides?: CallOverrides): Promise<BigNumber>;

    calculate_growth(
      _weeklyMinted: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    check(overrides?: CallOverrides): Promise<boolean>;

    circulating_emission(overrides?: CallOverrides): Promise<BigNumber>;

    circulating_supply(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _team_msig: PromiseOrValue<string>,
      __rewardsDistributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isFirstMint(overrides?: CallOverrides): Promise<boolean>;

    nextPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTeam(overrides?: CallOverrides): Promise<string>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    rebaseDisabled(overrides?: CallOverrides): Promise<boolean>;

    setEmission(
      _emission: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRebaseDisbaled(
      _disabled: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardDistributor(
      _newRewardsDistributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeam(
      _team: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTeamRate(
      _teamRate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setTkn(
      __tkn: PromiseOrValue<string>,
      __ve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setVoter(
      __voter: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    team(overrides?: CallOverrides): Promise<string>;

    teamRate(overrides?: CallOverrides): Promise<BigNumber>;

    update_period(overrides?: CallOverrides): Promise<BigNumber>;

    weekly(overrides?: CallOverrides): Promise<BigNumber>;

    weekly_emission(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Mint(address,uint256,uint256,uint256)"(
      sender?: PromiseOrValue<string> | null,
      weekly?: null,
      circulating_supply?: null,
      circulating_emission?: null
    ): MintEventFilter;
    Mint(
      sender?: PromiseOrValue<string> | null,
      weekly?: null,
      circulating_supply?: null,
      circulating_emission?: null
    ): MintEventFilter;
  };

  estimateGas: {
    EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    LOCK(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_TEAM_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    PRECISION(overrides?: CallOverrides): Promise<BigNumber>;

    TAIL_EMISSION(overrides?: CallOverrides): Promise<BigNumber>;

    _rewardsDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    _tokan(overrides?: CallOverrides): Promise<BigNumber>;

    _ve(overrides?: CallOverrides): Promise<BigNumber>;

    _voter(overrides?: CallOverrides): Promise<BigNumber>;

    acceptTeam(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    active_period(overrides?: CallOverrides): Promise<BigNumber>;

    calculate_emission(overrides?: CallOverrides): Promise<BigNumber>;

    calculate_growth(
      _weeklyMinted: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    check(overrides?: CallOverrides): Promise<BigNumber>;

    circulating_emission(overrides?: CallOverrides): Promise<BigNumber>;

    circulating_supply(overrides?: CallOverrides): Promise<BigNumber>;

    init(
      _team_msig: PromiseOrValue<string>,
      __rewardsDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isFirstMint(overrides?: CallOverrides): Promise<BigNumber>;

    nextPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    pendingTeam(overrides?: CallOverrides): Promise<BigNumber>;

    period(overrides?: CallOverrides): Promise<BigNumber>;

    rebaseDisabled(overrides?: CallOverrides): Promise<BigNumber>;

    setEmission(
      _emission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRebaseDisbaled(
      _disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardDistributor(
      _newRewardsDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTeam(
      _team: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTeamRate(
      _teamRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setTkn(
      __tkn: PromiseOrValue<string>,
      __ve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setVoter(
      __voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    team(overrides?: CallOverrides): Promise<BigNumber>;

    teamRate(overrides?: CallOverrides): Promise<BigNumber>;

    update_period(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    weekly(overrides?: CallOverrides): Promise<BigNumber>;

    weekly_emission(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    EMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LOCK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_TEAM_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PRECISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TAIL_EMISSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _rewardsDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _tokan(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _ve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _voter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptTeam(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    active_period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculate_emission(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculate_growth(
      _weeklyMinted: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    check(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    circulating_emission(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    circulating_supply(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    init(
      _team_msig: PromiseOrValue<string>,
      __rewardsDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isFirstMint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingTeam(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    period(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rebaseDisabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setEmission(
      _emission: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRebaseDisbaled(
      _disabled: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardDistributor(
      _newRewardsDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTeam(
      _team: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTeamRate(
      _teamRate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setTkn(
      __tkn: PromiseOrValue<string>,
      __ve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setVoter(
      __voter: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    team(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    teamRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update_period(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    weekly(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weekly_emission(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
